{"version":3,"file":"index.js","sources":["../build/compiled/bitcoin/constants.js","../build/compiled/bitcoin/utils.js","../build/compiled/bitcoin/selectcoin.js","../build/compiled/bitcoin/tx.js","../build/compiled/bitcoin/wallet.js","../build/compiled/bitcoin/psbt.js"],"sourcesContent":["import { networks, } from \"bitcoinjs-lib\";\nconst BlockStreamURL = \"https://blockstream.info/api\";\nconst MinSats = 1000;\nconst network = networks.bitcoin; // mainnet\nconst DummyUTXOValue = 1000;\nconst InputSize = 68;\nconst OutputSize = 43;\nexport { BlockStreamURL, MinSats, network, DummyUTXOValue, InputSize, OutputSize };\n//# sourceMappingURL=constants.js.map","const wif = require(\"wif\");\nimport { initEccLib, crypto, payments } from \"bitcoinjs-lib\";\nimport { network } from \"./constants\";\nimport { ECPairFactory } from \"ecpair\";\nimport * as ecc from \"@bitcoinerlab/secp256k1\";\ninitEccLib(ecc);\nconst ECPair = ECPairFactory(ecc);\n/**\n* convertPrivateKey converts buffer private key to WIF private key string\n* @param bytes buffer private key\n* @returns the WIF private key string\n*/\nconst convertPrivateKey = (bytes) => {\n    return wif.encode(128, bytes, true);\n};\n/**\n* convertPrivateKeyFromStr converts private key WIF string to Buffer\n* @param str private key string\n* @returns buffer private key\n*/\nconst convertPrivateKeyFromStr = (str) => {\n    const res = wif.decode(str);\n    return res === null || res === void 0 ? void 0 : res.privateKey;\n};\n/**\n* estimateTxFee estimates the transaction fee\n* @param numIns number of inputs in the transaction\n* @param numOuts number of outputs in the transaction\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns returns the estimated transaction fee in satoshi\n*/\nconst estimateTxFee = (numIns, numOuts, feeRatePerByte) => {\n    const fee = (68 * numIns + 43 * numOuts) * feeRatePerByte;\n    return fee;\n};\n/**\n* estimateNumInOutputs estimates number of inputs and outputs by parameters:\n* @param inscriptionID id of inscription to send (if any)\n* @param sendAmount satoshi amount need to send\n* @param isUseInscriptionPayFee use inscription output coin to pay fee or not\n* @returns returns the estimated number of inputs and outputs in the transaction\n*/\nconst estimateNumInOutputs = (inscriptionID, sendAmount, isUseInscriptionPayFee) => {\n    let numOuts = 0;\n    let numIns = 0;\n    if (inscriptionID !== \"\") {\n        numOuts++;\n        numIns++;\n    }\n    if (sendAmount > 0) {\n        numOuts++;\n    }\n    if (sendAmount > 0 || !isUseInscriptionPayFee) {\n        numIns++;\n        numOuts++; // for change BTC output\n    }\n    return { numIns, numOuts };\n};\n/**\n* estimateNumInOutputs estimates number of inputs and outputs by parameters:\n* @param inscriptionID id of inscription to send (if any)\n* @param sendAmount satoshi amount need to send\n* @param isUseInscriptionPayFee use inscription output coin to pay fee or not\n* @returns returns the estimated number of inputs and outputs in the transaction\n*/\nconst estimateNumInOutputsForBuyInscription = (sellerSignedPsbt) => {\n    const numIns = 1 + sellerSignedPsbt.txInputs.length + 2;\n    const numOuts = 1 + sellerSignedPsbt.txOutputs.length + 1 + 1;\n    return { numIns, numOuts };\n};\nfunction toXOnly(pubkey) {\n    return pubkey.subarray(1, 33);\n}\nfunction tweakSigner(signer, opts = {}) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    let privateKey = signer.privateKey;\n    if (!privateKey) {\n        throw new Error(\"Private key is required for tweaking signer!\");\n    }\n    if (signer.publicKey[0] === 3) {\n        privateKey = ecc.privateNegate(privateKey);\n    }\n    const tweakedPrivateKey = ecc.privateAdd(privateKey, tapTweakHash(toXOnly(signer.publicKey), opts.tweakHash));\n    if (!tweakedPrivateKey) {\n        throw new Error(\"Invalid tweaked private key!\");\n    }\n    return ECPair.fromPrivateKey(Buffer.from(tweakedPrivateKey), {\n        network: opts.network,\n    });\n}\nfunction tapTweakHash(pubKey, h) {\n    return crypto.taggedHash(\"TapTweak\", Buffer.concat(h ? [pubKey, h] : [pubKey]));\n}\nconst generateTaprootAddress = (privateKey) => {\n    const keyPair = ECPair.fromPrivateKey(privateKey);\n    const internalPubkey = toXOnly(keyPair.publicKey);\n    const { address } = payments.p2tr({\n        internalPubkey,\n    });\n    return address ? address : \"\";\n};\nconst generateTaprootKeyPair = (privateKey) => {\n    // init key pair from senderPrivateKey\n    const keyPair = ECPair.fromPrivateKey(privateKey);\n    // Tweak the original keypair\n    const tweakedSigner = tweakSigner(keyPair, { network });\n    // Generate an address from the tweaked public key\n    const p2pktr = payments.p2tr({\n        pubkey: toXOnly(tweakedSigner.publicKey),\n        network\n    });\n    const senderAddress = p2pktr.address ? p2pktr.address : \"\";\n    if (senderAddress === \"\") {\n        throw new Error(\"Can not get sender address from private key\");\n    }\n    return { keyPair, senderAddress, tweakedSigner, p2pktr };\n};\nconst fromSat = (sat) => {\n    return sat / 1e8;\n};\nexport { convertPrivateKey, convertPrivateKeyFromStr, estimateTxFee, estimateNumInOutputs, estimateNumInOutputsForBuyInscription, toXOnly, tweakSigner, tapTweakHash, ECPair, generateTaprootAddress, generateTaprootKeyPair, fromSat, };\n//# sourceMappingURL=utils.js.map","import { MinSats, DummyUTXOValue } from \"./constants\";\nimport { estimateTxFee, estimateNumInOutputs } from \"./utils\";\n/**\n* selectUTXOs selects the most reasonable UTXOs to create the transaction.\n* if sending inscription, the first selected UTXO is always the UTXO contain inscription.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectUTXOs = (utxos, inscriptions, sendInscriptionID, sendAmount, feeRatePerByte, isUseInscriptionPayFee) => {\n    const resultUTXOs = [];\n    let normalUTXOs = [];\n    let inscriptionUTXO = null;\n    let inscriptionInfo = null;\n    let valueOutInscription = 0;\n    let changeAmount = 0;\n    let maxAmountInsTransfer = 0;\n    // convert feeRate to interger\n    feeRatePerByte = Math.round(feeRatePerByte);\n    // estimate fee\n    const { numIns, numOuts } = estimateNumInOutputs(sendInscriptionID, sendAmount, isUseInscriptionPayFee);\n    const estFee = estimateTxFee(numIns, numOuts, feeRatePerByte);\n    // when BTC amount need to send is greater than 0, \n    // we should use normal BTC to pay fee\n    if (isUseInscriptionPayFee && sendAmount > 0) {\n        isUseInscriptionPayFee = false;\n    }\n    // filter normal UTXO and inscription UTXO to send\n    utxos.forEach(utxo => {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            normalUTXOs.push(utxo);\n        }\n        else {\n            // inscription UTXO\n            if (sendInscriptionID !== \"\") {\n                const inscription = inscriptionInfos.find(ins => ins.id === sendInscriptionID);\n                if (inscription !== undefined) {\n                    // don't support send tx with outcoin that includes more than one inscription\n                    if (inscriptionInfos.length > 1) {\n                        throw new Error(`InscriptionID ${{ sendInscriptionID }} is not supported to send.`);\n                    }\n                    inscriptionUTXO = utxo;\n                    inscriptionInfo = inscription;\n                    maxAmountInsTransfer = (inscriptionUTXO.value - inscriptionInfo.offset - 1) - MinSats;\n                    console.log(\"maxAmountInsTransfer: \", maxAmountInsTransfer);\n                }\n            }\n        }\n    });\n    if (sendInscriptionID !== \"\") {\n        if (inscriptionUTXO === null || inscriptionInfo == null) {\n            throw new Error(\"Can not find inscription UTXO for sendInscriptionID\");\n        }\n        // if value is not enough to pay fee, MUST use normal UTXOs to pay fee\n        if (isUseInscriptionPayFee && maxAmountInsTransfer < estFee) {\n            isUseInscriptionPayFee = false;\n        }\n        // push inscription UTXO to create tx\n        resultUTXOs.push(inscriptionUTXO);\n    }\n    // select normal UTXOs\n    let totalSendAmount = sendAmount;\n    if (!isUseInscriptionPayFee) {\n        totalSendAmount += estFee;\n    }\n    let totalInputAmount = 0;\n    if (totalSendAmount > 0) {\n        if (normalUTXOs.length === 0) {\n            throw new Error(\"Your balance is insufficient. Please top up BTC to your wallet.\");\n        }\n        normalUTXOs = normalUTXOs.sort((a, b) => {\n            if (a.value > b.value) {\n                return -1;\n            }\n            if (a.value < b.value) {\n                return 1;\n            }\n            return 0;\n        });\n        if (normalUTXOs[normalUTXOs.length - 1].value >= totalSendAmount) {\n            // select the smallest utxo\n            resultUTXOs.push(normalUTXOs[normalUTXOs.length - 1]);\n            totalInputAmount = normalUTXOs[normalUTXOs.length - 1].value;\n        }\n        else if (normalUTXOs[0].value < totalSendAmount) {\n            // select multiple UTXOs\n            for (let i = 0; i < normalUTXOs.length; i++) {\n                const utxo = normalUTXOs[i];\n                resultUTXOs.push(utxo);\n                totalInputAmount += utxo.value;\n                if (totalInputAmount >= totalSendAmount) {\n                    break;\n                }\n            }\n            if (totalInputAmount < totalSendAmount) {\n                throw new Error(\"Your balance is insufficient. Please top up BTC to your wallet.\");\n            }\n        }\n        else {\n            // select the nearest UTXO\n            let selectedUTXO = normalUTXOs[0];\n            for (let i = 1; i < normalUTXOs.length; i++) {\n                if (normalUTXOs[i].value < totalSendAmount) {\n                    resultUTXOs.push(selectedUTXO);\n                    totalInputAmount = selectedUTXO.value;\n                    break;\n                }\n                selectedUTXO = normalUTXOs[i];\n            }\n        }\n    }\n    // re-estimate fee with exact number of inputs and outputs\n    const { numOuts: reNumOuts } = estimateNumInOutputs(sendInscriptionID, sendAmount, isUseInscriptionPayFee);\n    let feeRes = estimateTxFee(resultUTXOs.length, reNumOuts, feeRatePerByte);\n    // calculate output amount\n    if (isUseInscriptionPayFee) {\n        if (maxAmountInsTransfer < feeRes) {\n            feeRes = maxAmountInsTransfer;\n        }\n        valueOutInscription = inscriptionUTXO.value - feeRes;\n        changeAmount = totalInputAmount - sendAmount;\n    }\n    else {\n        if (totalInputAmount < sendAmount + feeRes) {\n            feeRes = totalInputAmount - sendAmount;\n        }\n        valueOutInscription = (inscriptionUTXO === null || inscriptionUTXO === void 0 ? void 0 : inscriptionUTXO.value) || 0;\n        changeAmount = totalInputAmount - sendAmount - feeRes;\n    }\n    return { selectedUTXOs: resultUTXOs, isUseInscriptionPayFee: isUseInscriptionPayFee, valueOutInscription: valueOutInscription, changeAmount: changeAmount, fee: feeRes };\n};\n/**\n* selectUTXOs selects the most reasonable UTXOs to create the transaction.\n* if sending inscription, the first selected UTXO is always the UTXO contain inscription.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @returns the ordinal UTXO\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectInscriptionUTXO = (utxos, inscriptions, inscriptionID) => {\n    if (inscriptionID === \"\") {\n        throw Error(\"Inscription must not be empty string\");\n    }\n    // filter normal UTXO and inscription UTXO to send\n    for (const utxo of utxos) {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos !== undefined && inscriptionInfos !== null && inscriptionInfos.length > 0) {\n            const inscription = inscriptionInfos.find(ins => ins.id === inscriptionID);\n            if (inscription !== undefined) {\n                // don't support send tx with outcoin that includes more than one inscription\n                if (inscriptionInfos.length > 1) {\n                    throw new Error(\"InscriptionID is not supported to send \" + inscriptionID);\n                }\n                return { inscriptionUTXO: utxo, inscriptionInfo: inscription };\n            }\n        }\n    }\n    throw new Error(\"InscriptionID not found in your wallet \" + inscriptionID);\n};\n/**\n* selectCardinalUTXOs selects the most reasonable UTXOs to create the transaction.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendAmount satoshi amount need to send\n* @param isSelectDummyUTXO need to select dummy UTXO or not\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectCardinalUTXOs = (utxos, inscriptions, sendAmount, isSelectDummyUTXO) => {\n    const resultUTXOs = [];\n    let normalUTXOs = [];\n    let dummyUTXO = null;\n    // filter normal UTXO and inscription UTXO to send\n    utxos.forEach(utxo => {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            normalUTXOs.push(utxo);\n        }\n    });\n    normalUTXOs = normalUTXOs.sort((a, b) => {\n        if (a.value > b.value) {\n            return -1;\n        }\n        if (a.value < b.value) {\n            return 1;\n        }\n        return 0;\n    });\n    if (isSelectDummyUTXO) {\n        if (normalUTXOs[normalUTXOs.length - 1].value <= DummyUTXOValue) {\n            dummyUTXO = normalUTXOs[normalUTXOs.length - 1];\n            normalUTXOs.pop();\n        }\n        else {\n            throw new Error(\"No dummy UTXOs (value <= 1000) found in your address, you first need to create one.\");\n        }\n    }\n    let totalInputAmount = 0;\n    const totalSendAmount = sendAmount;\n    if (totalSendAmount > 0) {\n        if (normalUTXOs.length === 0) {\n            throw new Error(\"Your balance is insufficient. Please top up BTC to your wallet.\");\n        }\n        if (normalUTXOs[normalUTXOs.length - 1].value >= totalSendAmount) {\n            // select the smallest utxo\n            resultUTXOs.push(normalUTXOs[normalUTXOs.length - 1]);\n            totalInputAmount = normalUTXOs[normalUTXOs.length - 1].value;\n        }\n        else if (normalUTXOs[0].value < totalSendAmount) {\n            // select multiple UTXOs\n            for (let i = 0; i < normalUTXOs.length; i++) {\n                const utxo = normalUTXOs[i];\n                resultUTXOs.push(utxo);\n                totalInputAmount += utxo.value;\n                if (totalInputAmount >= totalSendAmount) {\n                    break;\n                }\n            }\n            if (totalInputAmount < totalSendAmount) {\n                throw new Error(\"Your balance is insufficient. Please top up BTC to your wallet.\");\n            }\n        }\n        else {\n            // select the nearest UTXO\n            let selectedUTXO = normalUTXOs[0];\n            for (let i = 1; i < normalUTXOs.length; i++) {\n                if (normalUTXOs[i].value < totalSendAmount) {\n                    resultUTXOs.push(selectedUTXO);\n                    totalInputAmount = selectedUTXO.value;\n                    break;\n                }\n                selectedUTXO = normalUTXOs[i];\n            }\n        }\n    }\n    return { selectedUTXOs: resultUTXOs, dummyUTXO: dummyUTXO };\n};\n/**\n* selectCardinalUTXOs selects the most reasonable UTXOs to create the transaction.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendAmount satoshi amount need to send\n* @param isSelectDummyUTXO need to select dummy UTXO or not\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectTheSmallestUTXO = (utxos, inscriptions) => {\n    let normalUTXOs = [];\n    // filter normal UTXO and inscription UTXO \n    utxos.forEach(utxo => {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            normalUTXOs.push(utxo);\n        }\n    });\n    if (normalUTXOs.length === 0) {\n        throw new Error(\"Your balance is insufficient. Please top up BTC to your wallet.\");\n    }\n    normalUTXOs = normalUTXOs.sort((a, b) => {\n        if (a.value > b.value) {\n            return -1;\n        }\n        if (a.value < b.value) {\n            return 1;\n        }\n        return 0;\n    });\n    return normalUTXOs[normalUTXOs.length - 1];\n};\nexport { selectUTXOs, selectInscriptionUTXO, selectCardinalUTXOs, selectTheSmallestUTXO, };\n//# sourceMappingURL=selectcoin.js.map","import { networks, payments, Psbt } from \"bitcoinjs-lib\";\nimport axios from \"axios\";\nimport { BlockStreamURL, DummyUTXOValue, MinSats, network } from \"./constants\";\nimport { toXOnly, tweakSigner, ECPair, estimateTxFee, generateTaprootKeyPair, fromSat } from \"./utils\";\nimport { selectTheSmallestUTXO, selectUTXOs } from \"./selectcoin\";\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTx = (senderPrivateKey, utxos, inscriptions, sendInscriptionID = \"\", receiverInsAddress, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam = true) => {\n    // validation\n    if (sendAmount > 0 && sendAmount < MinSats) {\n        throw new Error(\"sendAmount must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    // select UTXOs\n    const { selectedUTXOs, valueOutInscription, changeAmount, fee } = selectUTXOs(utxos, inscriptions, sendInscriptionID, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam);\n    let feeRes = fee;\n    // init key pair and tweakedSigner from senderPrivateKey\n    const { keyPair, senderAddress, tweakedSigner, p2pktr } = generateTaprootKeyPair(senderPrivateKey);\n    const psbt = new Psbt({ network });\n    // add inputs\n    selectedUTXOs.forEach((input) => {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value, script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey)\n        });\n    });\n    // add outputs\n    if (sendInscriptionID !== \"\") {\n        // add output inscription\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: valueOutInscription,\n        });\n    }\n    // add output send BTC\n    if (sendAmount > 0) {\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: sendAmount,\n        });\n    }\n    // add change output\n    if (changeAmount > 0) {\n        if (changeAmount >= MinSats) {\n            psbt.addOutput({\n                address: senderAddress,\n                value: changeAmount,\n            });\n        }\n        else {\n            feeRes += changeAmount;\n        }\n    }\n    // sign tx\n    selectedUTXOs.forEach((utxo, index) => {\n        psbt.signInput(index, tweakedSigner);\n    });\n    psbt.finalizeAllInputs();\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee: feeRes, selectedUTXOs, changeAmount, tx };\n};\n/**\n* createTxWithSpecificUTXOs creates the Bitcoin transaction with specific UTXOs (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* This function is used for testing.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount amount need to send (in sat)\n* @param valueOutInscription inscription output's value (in sat)\n* @param changeAmount cardinal change amount (in sat)\n* @param fee transaction fee (in sat)\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTxWithSpecificUTXOs = (senderPrivateKey, utxos, sendInscriptionID = \"\", receiverInsAddress, sendAmount, valueOutInscription, changeAmount, fee) => {\n    const network = networks.bitcoin; // mainnet\n    const selectedUTXOs = utxos;\n    // init key pair from senderPrivateKey\n    const keypair = ECPair.fromPrivateKey(senderPrivateKey);\n    // Tweak the original keypair\n    const tweakedSigner = tweakSigner(keypair, { network });\n    // Generate an address from the tweaked public key\n    const p2pktr = payments.p2tr({\n        pubkey: toXOnly(tweakedSigner.publicKey),\n        network\n    });\n    const senderAddress = p2pktr.address ? p2pktr.address : \"\";\n    if (senderAddress === \"\") {\n        throw new Error(\"Can not get sender address from private key\");\n    }\n    const psbt = new Psbt({ network });\n    // add inputs\n    selectedUTXOs.forEach((input) => {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value, script: p2pktr.output },\n            tapInternalKey: toXOnly(keypair.publicKey)\n        });\n    });\n    // add outputs\n    if (sendInscriptionID !== \"\") {\n        // add output inscription\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: valueOutInscription,\n        });\n    }\n    // add output send BTC\n    if (sendAmount > 0) {\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: sendAmount,\n        });\n    }\n    // add change output\n    if (changeAmount > 0) {\n        psbt.addOutput({\n            address: senderAddress,\n            value: changeAmount,\n        });\n    }\n    // sign tx\n    selectedUTXOs.forEach((utxo, index) => {\n        psbt.signInput(index, tweakedSigner);\n    });\n    psbt.finalizeAllInputs();\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTxSplitFundFromOrdinalUTXO = (senderPrivateKey, inscriptionUTXO, inscriptionInfo, sendAmount, feeRatePerByte) => {\n    // validation\n    if (sendAmount > 0 && sendAmount < MinSats) {\n        throw new Error(\"sendAmount must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    const { keyPair, senderAddress, tweakedSigner, p2pktr } = generateTaprootKeyPair(senderPrivateKey);\n    const maxAmountInsSpend = (inscriptionUTXO.value - inscriptionInfo.offset - 1) - MinSats;\n    const fee = estimateTxFee(1, 2, feeRatePerByte);\n    const totalAmountSpend = sendAmount + fee;\n    if (totalAmountSpend > maxAmountInsSpend) {\n        throw new Error(\"Your balance is insufficient. Please top up BTC to your wallet to pay network fee.\");\n    }\n    const newValueInscription = inscriptionUTXO.value - totalAmountSpend;\n    const psbt = new Psbt({ network });\n    // add inputs\n    psbt.addInput({\n        hash: inscriptionUTXO.tx_hash,\n        index: inscriptionUTXO.tx_output_n,\n        witnessUtxo: { value: inscriptionUTXO.value, script: p2pktr.output },\n        tapInternalKey: toXOnly(keyPair.publicKey)\n    });\n    // add outputs\n    // add output inscription: must be at index 0\n    psbt.addOutput({\n        address: senderAddress,\n        value: newValueInscription,\n    });\n    // add output send BTC\n    psbt.addOutput({\n        address: senderAddress,\n        value: sendAmount,\n    });\n    // sign tx\n    psbt.txInputs.forEach((utxo, index) => {\n        psbt.signInput(index, tweakedSigner);\n    });\n    psbt.finalizeAllInputs();\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee, selectedUTXOs: [inscriptionUTXO], newValueInscription: newValueInscription };\n};\nconst createDummyUTXOFromCardinal = async (senderPrivateKey, utxos, inscriptions, feeRatePerByte) => {\n    // create dummy UTXO from cardinal UTXOs\n    let dummyUTXO;\n    let newUTXO = null;\n    const smallestUTXO = selectTheSmallestUTXO(utxos, inscriptions);\n    if (smallestUTXO.value <= DummyUTXOValue) {\n        dummyUTXO = smallestUTXO;\n        return { dummyUTXO: dummyUTXO, splitTxID: \"\", selectedUTXOs: [], newUTXO: newUTXO, fee: 0 };\n    }\n    else {\n        const { keyPair, senderAddress, tweakedSigner, p2pktr } = generateTaprootKeyPair(senderPrivateKey);\n        const { txID, txHex, fee, selectedUTXOs, changeAmount } = createTx(senderPrivateKey, utxos, inscriptions, \"\", senderAddress, DummyUTXOValue, feeRatePerByte, false);\n        // TODO: uncomment here\n        try {\n            await broadcastTx(txHex);\n        }\n        catch (e) {\n            throw new Error(\"Broadcast the split tx error \" + (e === null || e === void 0 ? void 0 : e.toString()));\n        }\n        // init dummy UTXO rely on the result of the split tx\n        dummyUTXO = {\n            tx_hash: txID,\n            tx_output_n: 0,\n            value: DummyUTXOValue,\n        };\n        if (changeAmount > 0) {\n            newUTXO = {\n                tx_hash: txID,\n                tx_output_n: 1,\n                value: changeAmount,\n            };\n        }\n        return { dummyUTXO: dummyUTXO, splitTxID: txID, selectedUTXOs, newUTXO: newUTXO, fee };\n    }\n};\nconst broadcastTx = async (txHex) => {\n    const blockstream = new axios.Axios({\n        baseURL: BlockStreamURL\n    });\n    const response = await blockstream.post(\"/tx\", txHex);\n    const { status, data } = response;\n    if (status !== 200) {\n        throw Error(\"Broadcast tx error \" + data);\n    }\n    return response.data;\n};\nexport { selectUTXOs, createTx, broadcastTx, createTxWithSpecificUTXOs, createTxSplitFundFromOrdinalUTXO, createDummyUTXOFromCardinal, };\n//# sourceMappingURL=tx.js.map","const getBTCBalance = (params) => {\n    const normalUTXOs = [];\n    let btcBalance = 0;\n    const { utxos, inscriptions } = params;\n    // filter normal UTXO and inscription UTXO to send\n    utxos.forEach(utxo => {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            normalUTXOs.push(utxo);\n            btcBalance += utxo.value;\n        }\n    });\n    return btcBalance;\n};\nexport { getBTCBalance, };\n//# sourceMappingURL=wallet.js.map","import { Psbt, Transaction } from \"bitcoinjs-lib\";\nimport { network, DummyUTXOValue, MinSats, OutputSize } from \"./constants\";\nimport { toXOnly, estimateTxFee, generateTaprootKeyPair, estimateNumInOutputsForBuyInscription, fromSat, } from \"./utils\";\nimport { verifySchnorr } from \"@bitcoinerlab/secp256k1\";\nimport { selectCardinalUTXOs, selectInscriptionUTXO } from \"./selectcoin\";\nimport { broadcastTx, createDummyUTXOFromCardinal, createTxSplitFundFromOrdinalUTXO } from \"./tx\";\n/**\n* createPSBTToSell creates the partially signed bitcoin transaction to sale the inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerPrivateKey buffer private key of the seller\n* @param sellerAddress payment address of the seller to recieve BTC from buyer\n* @param ordinalInput ordinal input coin to sell\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @returns the encoded base64 partially signed transaction\n*/\nconst createPSBTToSell = (params) => {\n    const psbt = new Psbt({ network });\n    const { inscriptionUTXO: ordinalInput, amountPayToSeller, receiverBTCAddress, sellerPrivateKey, dummyUTXO, creatorAddress, feePayToCreator } = params;\n    const { keyPair, tweakedSigner, p2pktr } = generateTaprootKeyPair(sellerPrivateKey);\n    // add ordinal input into the first input coins with \n    // sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY\n    psbt.addInput({\n        hash: ordinalInput.tx_hash,\n        index: ordinalInput.tx_output_n,\n        witnessUtxo: { value: ordinalInput.value, script: p2pktr.output },\n        tapInternalKey: toXOnly(keyPair.publicKey),\n        sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY,\n    });\n    if (dummyUTXO !== undefined && dummyUTXO !== null && dummyUTXO.value > 0) {\n        psbt.addOutput({\n            address: receiverBTCAddress,\n            value: amountPayToSeller + dummyUTXO.value,\n        });\n    }\n    else {\n        psbt.addOutput({\n            address: receiverBTCAddress,\n            value: amountPayToSeller,\n        });\n    }\n    // the second input and output\n    // add dummy UTXO and output for paying to creator\n    if (feePayToCreator > 0 && creatorAddress !== \"\") {\n        psbt.addInput({\n            hash: dummyUTXO.tx_hash,\n            index: dummyUTXO.tx_output_n,\n            witnessUtxo: { value: dummyUTXO.value, script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n            sighashType: Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY,\n        });\n        psbt.addOutput({\n            address: creatorAddress,\n            value: feePayToCreator\n        });\n    }\n    // sign tx\n    psbt.txInputs.forEach((utxo, index) => {\n        psbt.signInput(index, tweakedSigner, [Transaction.SIGHASH_SINGLE | Transaction.SIGHASH_ANYONECANPAY]);\n        try {\n            const isValid = psbt.validateSignaturesOfInput(index, verifySchnorr, tweakedSigner.publicKey);\n            if (!isValid) {\n                throw new Error(\"Tx signature is invalid \" + index);\n            }\n        }\n        catch (e) {\n            throw new Error(\"Tx signature is invalid \" + index);\n        }\n    });\n    psbt.finalizeAllInputs();\n    return psbt.toBase64();\n};\n/**\n* createPSBTToBuy creates the partially signed bitcoin transaction to buy the inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbt PSBT from seller\n* @param buyerPrivateKey buffer private key of the buyer\n* @param buyerAddress payment address of the buy to receive inscription\n* @param valueInscription value in inscription\n* @param price price of the inscription that the seller wants to sell (in satoshi)\n* @param paymentUtxos cardinal input coins to payment\n* @param dummyUtxo cardinal dummy input coin\n* @returns the encoded base64 partially signed transaction\n*/\nconst createPSBTToBuy = (params) => {\n    const psbt = new Psbt({ network });\n    const { sellerSignedPsbt, buyerPrivateKey, price, receiverInscriptionAddress, valueInscription, paymentUtxos, dummyUtxo, feeRate } = params;\n    let totalValue = 0;\n    const { keyPair, tweakedSigner, p2pktr, senderAddress: buyerAddress } = generateTaprootKeyPair(buyerPrivateKey);\n    // Add dummy utxo to the first input coin\n    psbt.addInput({\n        hash: dummyUtxo.tx_hash,\n        index: dummyUtxo.tx_output_n,\n        witnessUtxo: { value: dummyUtxo.value, script: p2pktr.output },\n        tapInternalKey: toXOnly(keyPair.publicKey),\n    });\n    // Add inscription output\n    // the frist output coin has value equal to the sum of dummy value and value inscription\n    // this makes sure the first output coin is inscription outcoin \n    psbt.addOutput({\n        address: receiverInscriptionAddress,\n        value: dummyUtxo.value + valueInscription,\n    });\n    if (sellerSignedPsbt.txInputs.length !== sellerSignedPsbt.txOutputs.length) {\n        throw new Error(\"Length of inputs and outputs in seller signed psbt must not be different.\");\n    }\n    for (let i = 0; i < sellerSignedPsbt.txInputs.length; i++) {\n        // Add seller signed input\n        psbt.addInput({\n            ...sellerSignedPsbt.txInputs[i],\n            ...sellerSignedPsbt.data.inputs[i]\n        });\n        // Add seller output\n        psbt.addOutput({\n            ...sellerSignedPsbt.txOutputs[i],\n        });\n    }\n    // Add payment utxo inputs\n    for (const utxo of paymentUtxos) {\n        psbt.addInput({\n            hash: utxo.tx_hash,\n            index: utxo.tx_output_n,\n            witnessUtxo: { value: utxo.value, script: p2pktr.output },\n            tapInternalKey: toXOnly(keyPair.publicKey),\n        });\n        totalValue += utxo.value;\n    }\n    let fee = estimateTxFee(psbt.txInputs.length, psbt.txOutputs.length, feeRate);\n    let changeValue = totalValue - price - fee;\n    if (changeValue >= DummyUTXOValue) {\n        // Create a new dummy utxo output for the next purchase\n        psbt.addOutput({\n            address: buyerAddress,\n            value: DummyUTXOValue,\n        });\n        changeValue -= DummyUTXOValue;\n        const extraFee = OutputSize * feeRate;\n        if (changeValue >= extraFee) {\n            changeValue -= extraFee;\n            fee += extraFee;\n        }\n    }\n    if (changeValue < 0) {\n        throw Error(\"Your balance is insufficient.\");\n    }\n    // Change utxo\n    if (changeValue > 0) {\n        if (changeValue >= MinSats) {\n            psbt.addOutput({\n                address: buyerAddress,\n                value: changeValue,\n            });\n        }\n        else {\n            fee += changeValue;\n        }\n    }\n    // sign tx\n    psbt.txInputs.forEach((utxo, index) => {\n        if (index === 0 || index > sellerSignedPsbt.txInputs.length) {\n            psbt.signInput(index, tweakedSigner);\n        }\n    });\n    psbt.txInputs.forEach((utxo, index) => {\n        if (index === 0 || index > sellerSignedPsbt.txInputs.length) {\n            psbt.finalizeInput(index);\n            try {\n                const isValid = psbt.validateSignaturesOfInput(index, verifySchnorr, tweakedSigner.publicKey);\n                if (!isValid) {\n                    console.log(\"Tx signature is invalid \" + index);\n                }\n            }\n            catch (e) {\n                console.log(\"Tx signature is invalid \" + index);\n            }\n        }\n    });\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee, selectedUTXOs: [...paymentUtxos, dummyUtxo], changeAmount: changeValue, tx };\n};\n/**\n* reqListForSaleInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerPrivateKey buffer private key of the seller\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param amountPayToSeller BTC amount to pay to seller\n* @param feePayToCreator BTC fee to pay to creator\n* @param creatorAddress address of creator\n* amountPayToSeller + feePayToCreator = price that is showed on UI\n* @returns the base64 encode Psbt\n*/\nconst reqListForSaleInscription = async (params) => {\n    const { sellerPrivateKey, utxos, inscriptions, sellInscriptionID, receiverBTCAddress, feeRatePerByte } = params;\n    let { amountPayToSeller, feePayToCreator, creatorAddress, } = params;\n    // validation\n    if (feePayToCreator > 0 && creatorAddress === \"\") {\n        throw new Error(\"Creator address must not be empty.\");\n    }\n    if (sellInscriptionID === \"\") {\n        throw new Error(\"SellInscriptionID must not be empty.\");\n    }\n    if (receiverBTCAddress === \"\") {\n        throw new Error(\"receiverBTCAddress must not be empty.\");\n    }\n    if (amountPayToSeller === 0) {\n        throw new Error(\"amountPayToSeller must be greater than zero.\");\n    }\n    let needDummyUTXO = false;\n    if (feePayToCreator > 0) {\n        // creator is the selller\n        if (creatorAddress !== receiverBTCAddress) {\n            needDummyUTXO = true;\n        }\n        else {\n            // create only one output, don't need to create 2 outputs\n            amountPayToSeller += feePayToCreator;\n            creatorAddress = \"\";\n            feePayToCreator = 0;\n        }\n    }\n    if (amountPayToSeller < MinSats) {\n        throw new Error(\"amountPayToSeller must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    if (feePayToCreator > 0 && feePayToCreator < MinSats) {\n        throw new Error(\"feePayToCreator must not be less than \" + fromSat(MinSats) + \" BTC.\");\n    }\n    // select inscription UTXO\n    const { inscriptionUTXO, inscriptionInfo } = selectInscriptionUTXO(utxos, inscriptions, sellInscriptionID);\n    let newInscriptionUTXO = inscriptionUTXO;\n    // select dummy UTXO \n    // if there is no dummy UTXO, we have to create and broadcast the tx to split dummy UTXO first\n    let dummyUTXORes;\n    let selectedUTXOs = [];\n    let splitTxID = \"\";\n    if (needDummyUTXO) {\n        try {\n            // create dummy UTXO from cardinal UTXOs\n            const res = await createDummyUTXOFromCardinal(sellerPrivateKey, utxos, inscriptions, feeRatePerByte);\n            dummyUTXORes = res.dummyUTXO;\n            selectedUTXOs = res.selectedUTXOs;\n            splitTxID = res.splitTxID;\n        }\n        catch (e) {\n            // create dummy UTXO from inscription UTXO\n            const { txID, txHex, newValueInscription } = createTxSplitFundFromOrdinalUTXO(sellerPrivateKey, inscriptionUTXO, inscriptionInfo, DummyUTXOValue, feeRatePerByte);\n            // TODO: uncomment here\n            try {\n                await broadcastTx(txHex);\n            }\n            catch (e) {\n                throw new Error(\"Broadcast the split tx from inscription error \" + (e === null || e === void 0 ? void 0 : e.toString()));\n            }\n            splitTxID = txID;\n            newInscriptionUTXO = {\n                tx_hash: txID,\n                tx_output_n: 0,\n                value: newValueInscription,\n            };\n            dummyUTXORes = {\n                tx_hash: txID,\n                tx_output_n: 1,\n                value: DummyUTXOValue,\n            };\n        }\n    }\n    console.log(\"sell splitTxID: \", splitTxID);\n    console.log(\"sell dummyUTXORes: \", dummyUTXORes);\n    console.log(\"sell newInscriptionUTXO: \", newInscriptionUTXO);\n    const base64Psbt = createPSBTToSell({\n        inscriptionUTXO: newInscriptionUTXO,\n        amountPayToSeller: amountPayToSeller,\n        receiverBTCAddress: receiverBTCAddress,\n        sellerPrivateKey: sellerPrivateKey,\n        dummyUTXO: dummyUTXORes,\n        creatorAddress: creatorAddress,\n        feePayToCreator: feePayToCreator,\n    });\n    return { base64Psbt, selectedUTXOs: [inscriptionUTXO], splitTxID, splitUTXOs: selectedUTXOs };\n};\n/**\n* reqBuyInscription creates the PSBT of the seller to list for sale inscription.\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param sellerSignedPsbtB64 buffer private key of the buyer\n* @param buyerPrivateKey buffer private key of the buyer\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the seller\n* @param sellInscriptionID id of inscription to sell\n* @param receiverBTCAddress the seller's address to receive BTC\n* @param price  = amount pay to seller + fee pay to creator\n* @returns the base64 encode Psbt\n*/\nconst reqBuyInscription = async (params) => {\n    var _a;\n    const { sellerSignedPsbtB64, buyerPrivateKey, receiverInscriptionAddress, price, utxos, inscriptions, feeRatePerByte } = params;\n    // decode seller's signed PSBT\n    const sellerSignedPsbt = Psbt.fromBase64(sellerSignedPsbtB64, { network });\n    const sellerInputs = sellerSignedPsbt.data.inputs;\n    if (sellerInputs.length === 0) {\n        throw new Error(\"Invalid seller's PSBT.\");\n    }\n    const valueInscription = (_a = sellerInputs[0].witnessUtxo) === null || _a === void 0 ? void 0 : _a.value;\n    if (valueInscription === undefined || valueInscription === 0) {\n        throw new Error(\"Invalid value inscription in seller's PSBT.\");\n    }\n    const newUTXOs = utxos;\n    // select or create dummy UTXO\n    const { dummyUTXO, splitTxID, selectedUTXOs, newUTXO, fee: feeSplitUTXO } = await createDummyUTXOFromCardinal(buyerPrivateKey, utxos, inscriptions, feeRatePerByte);\n    console.log(\"buy dummyUTXO: \", dummyUTXO);\n    console.log(\"buy splitTxID: \", splitTxID);\n    console.log(\"buy selectedUTXOs for split: \", selectedUTXOs);\n    console.log(\"buy newUTXO: \", newUTXO);\n    // remove selected utxo or dummyUTXO, and append new UTXO to list of UTXO to create the next PSBT \n    if (selectedUTXOs.length > 0) {\n        selectedUTXOs.forEach((selectedUtxo) => {\n            const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === selectedUtxo.tx_hash && utxo.tx_output_n === selectedUtxo.tx_output_n);\n            newUTXOs.splice(index, 1);\n        });\n    }\n    else {\n        const index = newUTXOs.findIndex((utxo) => utxo.tx_hash === dummyUTXO.tx_hash && utxo.tx_output_n === dummyUTXO.tx_output_n);\n        newUTXOs.splice(index, 1);\n    }\n    if (newUTXO !== undefined && newUTXO !== null) {\n        newUTXOs.push(newUTXO);\n    }\n    console.log(\"buy newUTXOs: \", newUTXOs);\n    // select cardinal UTXOs to payment\n    const { numIns, numOuts } = estimateNumInOutputsForBuyInscription(sellerSignedPsbt);\n    const estTotalPaymentAmount = price + DummyUTXOValue + estimateTxFee(numIns, numOuts, feeRatePerByte);\n    const { selectedUTXOs: paymentUTXOs } = selectCardinalUTXOs(newUTXOs, inscriptions, estTotalPaymentAmount, false);\n    // create PBTS from the seller's one\n    const res = createPSBTToBuy({\n        sellerSignedPsbt: sellerSignedPsbt,\n        buyerPrivateKey: buyerPrivateKey,\n        receiverInscriptionAddress: receiverInscriptionAddress,\n        valueInscription: valueInscription,\n        price: price,\n        paymentUtxos: paymentUTXOs,\n        dummyUtxo: dummyUTXO,\n        feeRate: feeRatePerByte,\n    });\n    return {\n        tx: res.tx,\n        txID: res === null || res === void 0 ? void 0 : res.txID,\n        txHex: res === null || res === void 0 ? void 0 : res.txHex,\n        fee: (res === null || res === void 0 ? void 0 : res.fee) + feeSplitUTXO,\n        selectedUTXOs: [...paymentUTXOs, dummyUTXO],\n        splitTxID,\n        splitUTXOs: [...selectedUTXOs]\n    };\n};\nexport { createPSBTToSell, createPSBTToBuy, reqListForSaleInscription, reqBuyInscription, };\n//# sourceMappingURL=psbt.js.map"],"names":["networks","initEccLib","ecc","ECPairFactory","crypto","payments","Psbt","axios","Transaction","verifySchnorr"],"mappings":"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"}