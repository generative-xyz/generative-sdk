{"version":3,"file":"index.js","sources":["../build/compiled/bitcoin/constants.js","../build/compiled/bitcoin/utils.js","../build/compiled/bitcoin/tx.js","../build/compiled/bitcoin/wallet.js"],"sourcesContent":["const BlockStreamURL = \"https://blockstream.info/api\";\nconst MinSatInscription = 10; // can reduce it to 1 sat\nexport { BlockStreamURL, MinSatInscription };\n//# sourceMappingURL=constants.js.map","const wif = require(\"wif\");\nimport { initEccLib, crypto, payments } from \"bitcoinjs-lib\";\nimport { ECPairFactory } from \"ecpair\";\nimport * as ecc from \"@bitcoinerlab/secp256k1\";\ninitEccLib(ecc);\nconst ECPair = ECPairFactory(ecc);\n/**\n* convertPrivateKey converts buffer private key to WIF private key string\n* @param bytes buffer private key\n* @returns the WIF private key string\n*/\nconst convertPrivateKey = (bytes) => {\n    return wif.encode(128, bytes, true);\n};\n/**\n* estimateTxFee estimates the transaction fee\n* @param numIns number of inputs in the transaction\n* @param numOuts number of outputs in the transaction\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @returns returns the estimated transaction fee in satoshi\n*/\nconst estimateTxFee = (numIns, numOuts, feeRatePerByte) => {\n    const fee = (68 * numIns + 43 * numOuts) * feeRatePerByte;\n    return fee;\n};\n/**\n* estimateNumInOutputs estimates number of inputs and outputs by parameters:\n* @param inscriptionID id of inscription to send (if any)\n* @param sendAmount satoshi amount need to send\n* @param isUseInscriptionPayFee use inscription output coin to pay fee or not\n* @returns returns the estimated number of inputs and outputs in the transaction\n*/\nconst estimateNumInOutputs = (inscriptionID, sendAmount, isUseInscriptionPayFee) => {\n    let numOuts = 0;\n    let numIns = 0;\n    if (inscriptionID !== \"\") {\n        numOuts++;\n        numIns++;\n        if (!isUseInscriptionPayFee) {\n            numOuts++; // for change BTC output\n        }\n    }\n    if (sendAmount > 0) {\n        numOuts++;\n    }\n    if (sendAmount > 0 || !isUseInscriptionPayFee) {\n        numIns++;\n    }\n    return { numIns, numOuts };\n};\nfunction toXOnly(pubkey) {\n    return pubkey.subarray(1, 33);\n}\nfunction tweakSigner(signer, opts = {}) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    let privateKey = signer.privateKey;\n    if (!privateKey) {\n        throw new Error(\"Private key is required for tweaking signer!\");\n    }\n    if (signer.publicKey[0] === 3) {\n        privateKey = ecc.privateNegate(privateKey);\n    }\n    const tweakedPrivateKey = ecc.privateAdd(privateKey, tapTweakHash(toXOnly(signer.publicKey), opts.tweakHash));\n    if (!tweakedPrivateKey) {\n        throw new Error(\"Invalid tweaked private key!\");\n    }\n    return ECPair.fromPrivateKey(Buffer.from(tweakedPrivateKey), {\n        network: opts.network,\n    });\n}\nfunction tapTweakHash(pubKey, h) {\n    return crypto.taggedHash(\"TapTweak\", Buffer.concat(h ? [pubKey, h] : [pubKey]));\n}\nconst generateTaprootAddress = (privateKey) => {\n    const keyPair = ECPair.fromPrivateKey(privateKey);\n    const internalPubkey = toXOnly(keyPair.publicKey);\n    const { address } = payments.p2tr({\n        internalPubkey,\n    });\n    return address ? address : \"\";\n};\nexport { convertPrivateKey, estimateTxFee, estimateNumInOutputs, toXOnly, tweakSigner, tapTweakHash, ECPair, generateTaprootAddress, };\n//# sourceMappingURL=utils.js.map","import { networks, payments, Psbt } from \"bitcoinjs-lib\";\nimport axios from \"axios\";\nimport { BlockStreamURL, MinSatInscription } from \"./constants\";\nimport { toXOnly, tweakSigner, ECPair, estimateTxFee, estimateNumInOutputs } from \"./utils\";\n/**\n* selectUTXOs selects the most reasonable UTXOs to create the transaction.\n* if sending inscription, the first selected UTXO is always the UTXO contain inscription.\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the list of selected UTXOs\n* @returns the actual flag using inscription coin to pay fee\n* @returns the value of inscription outputs, and the change amount (if any)\n* @returns the network fee\n*/\nconst selectUTXOs = (utxos, inscriptions, sendInscriptionID, sendAmount, feeRatePerByte, isUseInscriptionPayFee) => {\n    const resultUTXOs = [];\n    let normalUTXOs = [];\n    let inscriptionUTXO = null;\n    let inscriptionInfo = null;\n    let valueOutInscription = 0;\n    let changeAmount = 0;\n    // estimate fee\n    const { numIns, numOuts } = estimateNumInOutputs(sendInscriptionID, sendAmount, isUseInscriptionPayFee);\n    const estFee = estimateTxFee(numIns, numOuts, feeRatePerByte);\n    // when BTC amount need to send is greater than 0, \n    // we should use normal BTC to pay fee\n    if (isUseInscriptionPayFee && sendAmount > 0) {\n        isUseInscriptionPayFee = false;\n    }\n    // filter normal UTXO and inscription UTXO to send\n    utxos.forEach(utxo => {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            normalUTXOs.push(utxo);\n        }\n        else {\n            // inscription UTXO\n            if (sendInscriptionID !== \"\") {\n                const inscription = inscriptionInfos.find(ins => ins.id === sendInscriptionID);\n                if (inscription !== undefined) {\n                    // don't support send tx with outcoin that includes more than one inscription\n                    if (inscriptionInfos.length > 1) {\n                        throw new Error(`InscriptionID ${{ sendInscriptionID }} is not supported to send.`);\n                    }\n                    inscriptionUTXO = utxo;\n                    inscriptionInfo = inscription;\n                }\n            }\n        }\n    });\n    if (sendInscriptionID !== \"\") {\n        if (inscriptionUTXO === null || inscriptionInfo == null) {\n            throw new Error(\"Can not find inscription UTXO for sendInscriptionID\");\n        }\n        if (isUseInscriptionPayFee) {\n            // if offset is 0: SHOULD use inscription to pay fee\n            // otherwise, MUST use normal UTXOs to pay fee\n            if (inscriptionInfo.offset !== 0) {\n                isUseInscriptionPayFee = false;\n            }\n            else {\n                // if value is not enough to pay fee, MUST use normal UTXOs to pay fee\n                if (inscriptionUTXO.value < estFee + MinSatInscription) {\n                    isUseInscriptionPayFee = false;\n                }\n            }\n        }\n        // push inscription UTXO to create tx\n        resultUTXOs.push(inscriptionUTXO);\n    }\n    // select normal UTXOs\n    let totalSendAmount = sendAmount;\n    if (!isUseInscriptionPayFee) {\n        totalSendAmount += estFee;\n    }\n    let totalInputAmount = 0;\n    if (totalSendAmount > 0) {\n        if (normalUTXOs.length === 0) {\n            throw new Error(\"Insuffient BTC balance to send\");\n        }\n        normalUTXOs = normalUTXOs.sort((a, b) => {\n            if (a.value > b.value) {\n                return -1;\n            }\n            if (a.value < b.value) {\n                return 1;\n            }\n            return 0;\n        });\n        console.log(\"normalUTXOs: \", normalUTXOs);\n        if (normalUTXOs[normalUTXOs.length - 1].value >= totalSendAmount) {\n            // select the smallest utxo\n            resultUTXOs.push(normalUTXOs[normalUTXOs.length - 1]);\n            totalInputAmount = normalUTXOs[normalUTXOs.length - 1].value;\n        }\n        else if (normalUTXOs[0].value < totalSendAmount) {\n            // select multiple UTXOs\n            for (let i = 0; i < normalUTXOs.length; i++) {\n                const utxo = normalUTXOs[i];\n                resultUTXOs.push(utxo);\n                totalInputAmount += utxo.value;\n                if (totalInputAmount >= totalSendAmount) {\n                    break;\n                }\n            }\n            if (totalInputAmount < totalSendAmount) {\n                throw new Error(\"Insuffient BTC balance to send\");\n            }\n        }\n        else {\n            // select the nearest UTXO\n            let selectedUTXO = normalUTXOs[0];\n            for (let i = 1; i < normalUTXOs.length; i++) {\n                if (normalUTXOs[i].value < totalSendAmount) {\n                    resultUTXOs.push(selectedUTXO);\n                    totalInputAmount = selectedUTXO.value;\n                    break;\n                }\n                selectedUTXO = normalUTXOs[i];\n            }\n        }\n    }\n    // re-estimate fee with exact number of inputs and outputs\n    const { numOuts: reNumOuts } = estimateNumInOutputs(sendInscriptionID, sendAmount, isUseInscriptionPayFee);\n    let fee = estimateTxFee(resultUTXOs.length, reNumOuts, feeRatePerByte);\n    // calculate output amount\n    if (isUseInscriptionPayFee) {\n        if (inscriptionUTXO.value < fee + MinSatInscription) {\n            fee = inscriptionUTXO.value - MinSatInscription;\n        }\n        valueOutInscription = inscriptionUTXO.value - fee;\n        changeAmount = totalInputAmount - sendAmount;\n    }\n    else {\n        if (totalInputAmount < sendAmount + fee) {\n            fee = totalInputAmount - sendAmount;\n        }\n        valueOutInscription = (inscriptionUTXO === null || inscriptionUTXO === void 0 ? void 0 : inscriptionUTXO.value) || 0;\n        changeAmount = totalInputAmount - sendAmount - fee;\n    }\n    return { selectedUTXOs: resultUTXOs, isUseInscriptionPayFee: isUseInscriptionPayFee, valueOutInscription: valueOutInscription, changeAmount: changeAmount, fee: fee };\n};\n/**\n* createTx creates the Bitcoin transaction (including sending inscriptions).\n* NOTE: Currently, the function only supports sending from Taproot address.\n* @param senderPrivateKey buffer private key of the sender\n* @param utxos list of utxos (include non-inscription and inscription utxos)\n* @param inscriptions list of inscription infos of the sender\n* @param sendInscriptionID id of inscription to send\n* @param receiverInsAddress the address of the inscription receiver\n* @param sendAmount satoshi amount need to send\n* @param feeRatePerByte fee rate per byte (in satoshi)\n* @param isUseInscriptionPayFee flag defines using inscription coin to pay fee\n* @returns the transaction id\n* @returns the hex signed transaction\n* @returns the network fee\n*/\nconst createTx = (senderPrivateKey, utxos, inscriptions, sendInscriptionID = \"\", receiverInsAddress, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam = true) => {\n    const network = networks.bitcoin; // mainnet\n    // select UTXOs\n    const { selectedUTXOs, valueOutInscription, changeAmount, fee } = selectUTXOs(utxos, inscriptions, sendInscriptionID, sendAmount, feeRatePerByte, isUseInscriptionPayFeeParam);\n    console.log(\"selectedUTXOs: \", selectedUTXOs);\n    // init key pair from senderPrivateKey\n    const keypair = ECPair.fromPrivateKey(senderPrivateKey);\n    // Tweak the original keypair\n    const tweakedSigner = tweakSigner(keypair, { network });\n    // Generate an address from the tweaked public key\n    const p2pktr = payments.p2tr({\n        pubkey: toXOnly(tweakedSigner.publicKey),\n        network\n    });\n    const senderAddress = p2pktr.address ? p2pktr.address : \"\";\n    if (senderAddress === \"\") {\n        throw new Error(\"Can not get sender address from private key\");\n    }\n    const psbt = new Psbt({ network });\n    // add inputs\n    selectedUTXOs.forEach((input) => {\n        psbt.addInput({\n            hash: input.tx_hash,\n            index: input.tx_output_n,\n            witnessUtxo: { value: input.value, script: p2pktr.output },\n            tapInternalKey: toXOnly(keypair.publicKey)\n        });\n    });\n    // add outputs\n    if (sendInscriptionID !== \"\") {\n        // add output inscription\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: valueOutInscription,\n        });\n    }\n    // add output send BTC\n    if (sendAmount > 0) {\n        psbt.addOutput({\n            address: receiverInsAddress,\n            value: sendAmount,\n        });\n    }\n    // add change output\n    if (changeAmount > 0) {\n        psbt.addOutput({\n            address: senderAddress,\n            value: changeAmount,\n        });\n    }\n    // sign tx\n    selectedUTXOs.forEach((utxo, index) => {\n        psbt.signInput(index, tweakedSigner);\n    });\n    psbt.finalizeAllInputs();\n    // get tx hex\n    const tx = psbt.extractTransaction();\n    console.log(\"Transaction : \", tx);\n    const txHex = tx.toHex();\n    return { txID: tx.getId(), txHex, fee };\n};\nconst broadcastTx = async (txHex) => {\n    const blockstream = new axios.Axios({\n        baseURL: BlockStreamURL\n    });\n    const response = await blockstream.post(\"/tx\", txHex);\n    return response.data;\n};\nexport { selectUTXOs, createTx, broadcastTx, };\n//# sourceMappingURL=tx.js.map","const getBTCBalance = (params) => {\n    const normalUTXOs = [];\n    let btcBalance = 0;\n    const { utxos, inscriptions } = params;\n    // filter normal UTXO and inscription UTXO to send\n    utxos.forEach(utxo => {\n        // txIDKey = tx_hash:tx_output_n\n        let txIDKey = utxo.tx_hash.concat(\":\");\n        txIDKey = txIDKey.concat(utxo.tx_output_n.toString());\n        // try to get inscriptionInfos\n        const inscriptionInfos = inscriptions[txIDKey];\n        if (inscriptionInfos === undefined || inscriptionInfos === null || inscriptionInfos.length == 0) {\n            // normal UTXO\n            normalUTXOs.push(utxo);\n            btcBalance += utxo.value;\n        }\n    });\n    return btcBalance;\n};\nexport { getBTCBalance, };\n//# sourceMappingURL=wallet.js.map"],"names":["initEccLib","ecc","ECPairFactory","crypto","payments","networks","Psbt","axios"],"mappings":"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"}