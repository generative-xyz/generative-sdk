import { Wallet, decryptWallet, deriveETHWallet, deriveSegwitWallet, encryptWallet, getBitcoinKeySignContent, importBTCPrivateKey, signByETHPrivKey } from "../src/index";

import { assert } from "chai";
import {
    networks,
} from "bitcoinjs-lib";

const network = networks.bitcoin;  // mainnet
require("dotenv").config({ path: __dirname + "/.env" });


describe("Import Wallet", async () => {
    it("Import BTC private key - encrypt and decrypt wallet", async () => {
        // TODO: enter the private key
        const privKeyStr = process.env.PRIV_KEY_1 || "";
        const password = "hsbefjwkbfkw";

        const wallet: Wallet = {
            privKey: privKeyStr
        };

        // import btc private key
        const { taprootPrivKeyBuffer, taprootAddress } = importBTCPrivateKey(privKeyStr);
        console.log("Taproot address: ", taprootAddress);

        // encrypt
        const cipherText = encryptWallet(wallet, password);

        // decrypt
        const decryptedWallet = decryptWallet(cipherText, password);

        assert.notEqual(decryptedWallet, undefined);
        assert.equal(decryptedWallet?.privKey, privKeyStr);
    });

    it("Import BTC private key - derive segwit wallet and eth wallet", async () => {
        // TODO: enter the private key
        const privKeyStr = process.env.PRIV_KEY_1 || "";
        const password = "hsbefjwkbfkw";

        const wallet: Wallet = {
            privKey: privKeyStr
        };

        // import btc private key
        const { taprootPrivKeyBuffer, taprootAddress } = importBTCPrivateKey(privKeyStr);
        console.log("Taproot address: ", taprootAddress);

        // derive segwit wallet
        const { segwitPrivKeyBuffer, segwitAddress } = deriveSegwitWallet(taprootPrivKeyBuffer);
        console.log("segwitPrivKeyBuffer, segwitAddress: ", segwitPrivKeyBuffer, segwitAddress);

        // derive eth wallet
        const { ethPrivKey, ethAddress } = deriveETHWallet(taprootPrivKeyBuffer);
        console.log("ethPrivKey, ethAddress: ", ethPrivKey, ethAddress);
    });

    it("Import BTC private key - derive eth wallet and sign by eth private key", async () => {
        // TODO: enter the private key
        const privKeyStr = process.env.PRIV_KEY_1 || "";

        const wallet: Wallet = {
            privKey: privKeyStr
        };

        // import btc private key
        const { taprootPrivKeyBuffer, taprootAddress } = importBTCPrivateKey(privKeyStr);
        console.log("Taproot address: ", taprootAddress);

        // for (let i = 0; i < 100; i++) {
        // }
        // derive segwit wallet
        const { segwitPrivKeyBuffer, segwitAddress } = deriveSegwitWallet(taprootPrivKeyBuffer);
        console.log("segwitPrivKeyBuffer, segwitAddress: ", segwitPrivKeyBuffer.toString("hex"), segwitAddress);

        // derive eth wallet
        const { ethPrivKey, ethAddress } = deriveETHWallet(taprootPrivKeyBuffer);
        console.log("ethPrivKey, ethAddress: ", ethPrivKey, ethAddress);
        const nonceMessage = "abc";

        const SIGN_MESSAGE = `GM.\n\nPlease sign this message to confirm your Generative wallet addresses generated by your Ethereum address.\n\nTaproot address:\n${taprootAddress}\n\nSegwit address:\n${segwitAddress}\n\nNonce:\n${nonceMessage}\n\nThe Generative Core Team`;

        const toSign = '0x' + getBitcoinKeySignContent(SIGN_MESSAGE).toString('hex');

        const signature = signByETHPrivKey(ethPrivKey, toSign);
        assert.notEqual(signature, "");
        assert.equal(signature.substring(0, 2), "0x");

        assert.equal(segwitAddress, "1KVQhoJHeviEambmxDquRckDK7opXJx9U4");
        assert.equal(ethAddress, "0x4809081b2cca77207634faa47a453f83cc99eb9b");
    });

    it("Sign by eth private key - compare signature was from metamask", async () => {
        const ethPrivKey = process.env.ETH_PRIV_KEY || "";
        const ethAddress = process.env.ETH_ADDRESS || "";
        console.log("ethPrivKey, ethAddress: ", ethPrivKey, ethAddress);
        const nonceMessage = "9935928c-452d-dd02-6aa3-62795c5cc875";
        const taprootAddress = "bc1pj2t2szx6rqzcyv63t3xepgdnhuj2zd3kfggrqmd9qwlg3vsx37fqywwhyx";
        const segwitAddress = "1FkVNdA26Fbtqm5npqbzy3RuKGCZa1HCSi";

        const SIGN_MESSAGE = `GM.\n\nPlease sign this message to confirm your Generative wallet addresses generated by your Ethereum address.\n\nTaproot address:\n${taprootAddress}\n\nSegwit address:\n${segwitAddress}\n\nNonce:\n${nonceMessage}\n\nThe Generative Core Team`;
        const toSign = '0x' + getBitcoinKeySignContent(SIGN_MESSAGE).toString('hex');

        const signature = signByETHPrivKey(ethPrivKey, toSign);
        assert.equal(signature, "0xa081f4f6e06bdc0b6d503d847fc2332d150b09838aa3391c6e417c2903994cbd00afc2a0d8582d252d8e9a7714572a766600bf1fc588858ae3ce799832d110911c");
    });
});
